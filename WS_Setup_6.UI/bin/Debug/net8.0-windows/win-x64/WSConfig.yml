# yaml-language-server: $schema=https://aka.ms/dsc/schemas/v3/bundled/config/document.vscode.json
$schema: https://aka.ms/dsc/schemas/v3/bundled/config/document.json
metadata:
  Microsoft.DSC:
    securityContext: elevated
resources:
- name: SetAdvantagePowerPlan
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: SetAdvantagePowerPlan
      type: PSDesiredStateConfiguration/Script
      properties:
        # The GetScript block can return a basic placeholder.
        # Maybe this could be where parameters are passed from Ninja to the script?
        GetScript: |
          @{ Result = "Not necessary" }
        # TestScript should return $true if the configuration is already in the desired state.
        # Logic here TBD. Possible to check with Microsoft.Windows/WMI and return $true or $false based on findings?
        # For a simple implementation (or testing), return $false to enforce SetScript on every run.
        TestScript: |
          $activePlanOutput = powercfg -getactivescheme
          if ($activePlanOutput -match "Advantage Performance") {
                return $true
            } else {
                return $false
            }
        # SetScript contains the script / commands.
        SetScript: |
          $HighPerfSource = "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"
          $AdvPerfGUID = (powercfg -duplicatescheme $HighPerfSource).Split()[3]
          powercfg -changename $AdvPerfGUID "Advantage Performance"
          Start-Sleep -Seconds 3
          powercfg -setactive $AdvPerfGUID

- name: DisablePowerManagementOnUSBHubs
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: DisablePowerManagementOnUSBHubs
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $hubs = Get-WmiObject Win32_USBHub
          if (-not $hubs) {
              return $true
          }
          $powerMgmt = Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi
          $allDisabled = $true
          foreach ($p in $powerMgmt) {
              foreach ($h in $hubs) {
                  if ($p.InstanceName.ToUpper() -like "*$($h.PNPDeviceID)*") {
                      if ($p.Enable -eq $true) {
                          $allDisabled = $false
                        }
                    }
                }
            }
          return $allDisabled
        SetScript: |
          $hubs = Get-WmiObject Win32_USBHub
          $powerMgmt = Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi
          foreach ($p in $powerMgmt) {
              foreach ($h in $hubs) {
                  if ($p.InstanceName.ToUpper() -like "*$($h.PNPDeviceID)*") {
                      $p.Enable = $False
                      $p.psbase.Put() | Out-Null
                    }
                }
            }

- name: DisableUSBxHCI
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: DisableUSBxHCI
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $controllers = Get-WmiObject Win32_PnPEntity | Where-Object { $_.Name -like "*eXtensible*" }
          if (-not $controllers) {
              return $true
            }
          $powerDevices = Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi
          $allDisabled = $true
          foreach ($controller in $controllers) {
              $matchingDevices = $powerDevices | Where-Object { $_.InstanceName.ToUpper() -like "*$($controller.PNPDeviceID)*" }
              if ($matchingDevices) {
                  foreach ($device in $matchingDevices) {
                      if ($device.Enable -eq $true) {
                          $allDisabled = $false
                        }
                    }
                }
            }
          return $allDisabled
        SetScript: |
          $controllers = Get-WmiObject Win32_PnPEntity | Where-Object { $_.Name -like "*eXtensible*" }
          foreach ($controller in $controllers) {
              foreach ($p in Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi) {
                  if ($p.InstanceName.ToUpper() -like "*$($controller.PNPDeviceID)*") {
                      $p.Enable = $False
                      $p.psbase.Put() | Out-Null
                    }
                }
            }

- name: SetPowerSettings
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
      - name: SetPowerSettings
        type: PsDesiredStateConfiguration/Script
        properties:
          GetScript: |
            @{ Result = "Not necessary" }
          TestScript: |
            $monitorValue = (powercfg -query SCHEME_CURRENT SUB_VIDEO VIDEOIDLE).Trim()
            if ($monitorValue -match "30") {
                return $true
            }
            else {
                return $false
            }
          SetScript: |
            powercfg -x -monitor-timeout-ac 30
            powercfg -x -monitor-timeout-dc 30
            powercfg -x -disk-timeout-ac 120
            powercfg -x -disk-timeout-dc 120
            powercfg -x -standby-timeout-ac 0
            powercfg -x -standby-timeout-dc 0
            powercfg -x -hibernate-timeout-ac 0
            powercfg -x -hibernate-timeout-dc 0
            powercfg -h off

- name: DisableEEE
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: DisableEEE
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          # Initialize a flag assuming all EEE settings are disabled.
          $allDisabled = $true
          $ethernetAdapters = Get-NetAdapter | Where-Object { $_.HardwareInterface -eq $true -and $_.NdisPhysicalMedium -eq 14 }
          if (-not $ethernetAdapters) {
              return $true
            }
          foreach ($adapter in $ethernetAdapters) {
              $properties = Get-NetAdapterAdvancedProperty -Name $adapter.Name
              $eeeProperties = $properties | Where-Object { $_.RegistryKeyword -like "*EEE*" -and $_.DisplayName -like "*Ethernet*" }
              if (-not $eeeProperties) {
                  continue
              }
              foreach ($property in $eeeProperties) {
                  if ($property.RegistryValue -ne 0) {
                      $allDisabled = $false
                    }
                }
            }
          return $allDisabled
        SetScript: |
          $ethernetAdapters = Get-NetAdapter | Where-Object { $_.HardwareInterface -eq $true -and $_.NdisPhysicalMedium -eq 14 }
          foreach ($adapter in $ethernetAdapters) {
              $properties = Get-NetAdapterAdvancedProperty -Name $adapter.Name
              $eeeProperties = $properties | Where-Object { $_.RegistryKeyword -like "*EEE*" -and $_.DisplayName -like "*Ethernet*" }
              foreach ($property in $eeeProperties) {
                  # Disable EEE by setting the registry value to 0.
                  Set-NetAdapterAdvancedProperty -Name $adapter.Name -RegistryKeyword $property.RegistryKeyword -RegistryValue 0
                }
            }

- name: ManageBitLockerProtection
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: ManageBitLockerProtection
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $DriveLetter = $env:SystemDrive
          $bitlockerOutput = & manage-bde -status $DriveLetter | Out-String
          if ($bitlockerOutput -match "Protection\s+On") {
              return $false
            }
            else {
              return $true
            }
        SetScript: |
          $DriveLetter = $env:SystemDrive
          Suspend-BitLocker -MountPoint $DriveLetter -RebootCount 1 -ErrorAction SilentlyContinue

- name: DisableCoalescing
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: DisableCoalescing
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $globalSettings = netsh int tcp show global | Out-String
          if ([string]::IsNullOrWhiteSpace($globalSettings)) {
              return $true
            }
          $rssDisabled = $globalSettings -match "Receive(-| )Side Scaling.*Disabled"
          $rscDisabled = $globalSettings -match "RSC.*Disabled"
          if ($rssDisabled -and $rscDisabled) {
              return $true
          } else {
              return $false
          }
        SetScript: |
          netsh int tcp set global RSS=Disabled
          netsh int tcp set global RSC=Disabled

- name: ManageBITSService
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: ManageBITSService
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $service = Get-Service -Name "BITS" -ErrorAction SilentlyContinue
            if ($service -and $service.Status -eq "Stopped" -and ((Get-Service -Name "BITS").StartType -eq "Disabled")) {
                return $true
            } else {
                return $false
            }
        SetScript: |
          Stop-Service -Name "BITS" -Force
          Set-Service -Name "BITS" -StartupType Disabled

- name: RemoteRegistryService
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: RemoteRegistryService
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $service = Get-Service -Name "RemoteRegistry" -ErrorAction SilentlyContinue
            if ($service -and $service.Status -eq "Stopped" -and ((Get-Service -Name "RemoteRegistry").StartType -eq "Disabled")) {
                return $true
            } else {
                return $false
            }
        SetScript: |
          Stop-Service -Name "RemoteRegistry" -StartupType Disabled
          Set-Service -Name "RemoteRegistry" -StartupType Disabled

- name: DisableNotificationsService
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: DisableNotificationsService
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $service = Get-Service -Name "WpnService" -ErrorAction SilentlyContinue
            if (-not $service -or ($service.Status -eq "Stopped" -and $service.StartType -eq "Disabled")) {
                return $true
            } else {
                return $false
            }
        SetScript: |
          Stop-Service -Name "WpnService" -Force
          Set-Service -Name "WpnService" -StartupType Disabled

- name: SysMainService
  type: Microsoft.Windows/WindowsPowerShell
  properties:
    resources:
    - name: SysMainService
      type: PSDesiredStateConfiguration/Script
      properties:
        GetScript: |
          @{ Result = "Not necessary" }
        TestScript: |
          $service = Get-Service -Name "SysMain" -ErrorAction SilentlyContinue
            if (-not $service -or ($service.Status -eq "Running" -and $service.StartType -eq "Automatic")) {
                return $true
            } else {
                return $false
            }
        SetScript: |
          Start-Service -Name "SysMain"
          Set-Service -Name "SysMain" -StartupType Automatic

- name: ConfigureFirewall
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile
    valueName: EnableFirewall
    valueData:
      DWord: 0

- name: PublicFirewall
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\PublicProfile
    valueName: EnableFirewall
    valueData:
      DWord: 0

- name: DomainFirewall
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\DomainProfile
    valueName: EnableFirewall
    valueData:
      DWord: 0

- name: CortanaConfiguration
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\Software\Policies\Microsoft\Windows\Windows Search
    valueName: AllowCortana
    valueData:
      DWord: 0

- name: DisableLLMNR
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\Software\Policies\Microsoft\Windows NT\DNSClient
    valueName: EnableMulticast
    valueData:
      DWord: 0

- name: DisableFastBoot
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Power
    valueName: HiberbootEnabled
    valueData:
      DWord: 0

- name: AutoManagePrintersSetting
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows
    valueName: LegacyDefaultPrinterMode
    valueData:
      DWord: 0

- name: AdvertisingIDSetting
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKCU\Software\Microsoft\Windows\CurrentVersion\AdvertisingInfo
    valueName: Enabled
    valueData:
      DWord: 0

- name: TelemetrySetting
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\Software\Policies\Microsoft\Windows\Data Collection
    valueName: AllowTelemetry
    valueData: 
      DWord: 0

- name: UacEnable
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    valueName: EnableLUA
    valueData:
      DWord: 1

- name: AdminSilentElevation
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    valueName: ConsentPromptBehaviorAdmin
    valueData:
      DWord: 0

- name: StandardUserPrompt
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    valueName: ConsentPromptBehaviorUser
    valueData:
      DWord: 3

- name: ShowFileExtensions
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    valueName: HideFileExt
    valueData:
      DWord: 0

- name: DisableWpnUserService
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\System\CurrentControlSet\Services\WpnUserService
    valueName: Start
    valueData:
      DWord: 4

- name: DisablePushNotifications
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\Software\Policies\Microsoft\Windows\CurrentVersion\PushNotifications
    valueName: NoTileApplicationNotification
    valueData:
      DWord: 1

- name: ConfigureSuperFetch
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters
    valueName: EnableSuperfetch
    valueData:
      DWord: 3

- name: TargetedReleaseversion
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate
    valueName: TargetReleaseVersion
    valueData:
      DWord: 1
      
- name: TargetedReleaseversionInfo
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate
    valueName: TargetReleaseVersionInfo
    valueData:
      String: "24H2"

- name: TargetReleaseProductVersion
  type: Microsoft.Windows/Registry
  properties:
    keyPath: HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate
    valueName: ProductVersion
    valueData:
      String: Windows 11